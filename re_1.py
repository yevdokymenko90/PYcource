'''
Регулярные выражения в Python 
предоставляют мощный способ для поиска 
и манипуляции текстом. 

Они используются для спецификации набора правил, 
которым должны соответствовать строки в тексте, 
что позволяет выполнять сложные поиски и замены в строках.

Python предоставляет модуль `re` 
для работы с регулярными выражениями. 

Вот основные функции и методы, 
предоставляемые этим модулем:

re.search(pattern, string):
Поиск первого вхождения шаблона в строке. 
Возвращает объект `Match` или 
`None`, если совпадение не найдено.

re.match(pattern, string)`: 
Похож на `search`, но ищет совпадение только в начале строки.

re.findall(pattern, string)`: 
Находит все неперекрывающиеся совпадения шаблона в строке и возвращает их в виде списка.

re.finditer(pattern, string)`: 
Похож на `findall`, но возвращает итератор, возвращающий объекты `Match`.

re.sub(pattern, repl, string)`: 
Заменяет все совпадения шаблона в строке на `repl` и возвращает новую строку.
'''


'''
### Примеры Использования Регулярных Выражений

#   Давайте рассмотрим несколько простых примеров использования регулярных выражений в Python.

#### Поиск Всех Электронных Адресов в Тексте
'''

import re

text = "Пожалуйста, свяжитесь с нами по адресу info@example.com или support@example.com."
emails = re.findall(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', text)

print(emails)

'''
#### Замена Нежелательных Слов в Строке
'''

import re

text = "Этот фильм был ужасен, отвратителен и скучен."
clean_text = re.sub(r"ужасен|отвратителен|скучен", "плох", text)

import re

print(clean_text)

''' Проверка Формата Даты'''

date = "01-01-2020"
if re.match(r'\d{2}-\d{2}-\d{4}', date):
    print("Дата соответствует формату DD-MM-YYYY.")
else:
    print("Дата не соответствует формату DD-MM-YYYY.")




''' Поиск Всех Слов, Начинающихся с Определенной Буквы'''

text = "Кот, картофель, котлета, котик, кот"
words = re.findall(r'\bк\w+', text)


'''
Представленный фрагмент кода на Python использует функцию 
`findall` из модуля `re` 
для поиска всех слов в строке, 
которые начинаются с определенной буквы.

Строка `text` определена как 
"Кот, картофель, котлета, котик, кот". 
Эта строка содержит несколько слов, 
некоторые из которых начинаются с буквы "к".

Затем используется функция 
`re.findall` 
для поиска всех вхождений шаблона в строке `text`. 
Шаблон определен как r'\bк\w+'.

Вот что означает каждая часть шаблона:

- \b - это граница слова. 
Это гарантирует, 
что шаблон совпадает только с теми словами, 
которые начинаются с указанной буквы, 
а не с теми словами, 
которые содержат эту букву в другом месте.

- к - это конкретная буква, с которой должно начинаться каждое слово.

- \w+ совпадает с одним или несколькими символами слова 
(эквивалентно [a-zA-Z0-9_] в английском алфавите). 
Эта часть шаблона гарантирует, 
что совпадает вся слово, 
а не только начальная буква.

Результат функции
re.findall - это список всех слов в `text`, 
которые начинаются с "к". 
Этот список сохраняется в переменной `words`.
'''

'''
Регулярные выражения играют важную роль в автоматизации и автоматизированном тестировании, 
предоставляя гибкие средства для поиска, проверки и манипуляции текстовыми данными. 
В контексте автотестов регулярные выражения могут использоваться для различных задач, 
включая валидацию форматов данных, извлечение информации из логов или ответов сервера и многие другие.
'''

'''
Валидация Форматов Данных

Одно из распространенных применений регулярных выражений в автотестах — 
#валидация форматов данных, таких как электронные адреса, 
номера телефонов, 
идентификаторы и форматы дат. 
Это помогает убедиться, что данные, 
введенные пользователем или возвращенные приложением, 
соответствуют ожидаемым шаблонам.
'''


'''
# Пример: Проверка формата электронной почты**
'''

import re

def validate_email(email):
    pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    return re.match(pattern, email) is not None

assert validate_email("example@example.com")
assert not validate_email("example.com")

'''
### Извлечение Информации

Регулярные выражения могут использоваться для 
извлечения конкретных частей информации из текстов, 
например, 
из логов приложения или ответов сервера в тестах API. 
Это особенно полезно для анализа сложных текстовых данных 
и проверки наличия или значения определенных данных.
'''


'''
# Пример: Извлечение кодов статуса HTTP из логов**
'''


import re

log = "GET /index.html 200 OK"
match = re.search(r'\b\d{3}\b', log)
if match:
    status_code = match.group(0)
    print("Найденный код статуса HTTP:", status_code)

'''

### Манипуляции с Текстом
'''

''' 
В автотестах часто возникает необходимость модифицировать текстовые данные
для подготовки входных значений или обработки результатов. 
Регулярные выражения предоставляют мощные инструменты для таких манипуляций.
'''


# Замена токенов в строке
import re

url = "https://example.com/api?key=<API_KEY>"
new_url = re.sub(r'<API_KEY>', '123456', url)
print(new_url)

'''

### Поиск Совпадений в Ответах API
'''

'''
При тестировании API можно использовать регулярные выражения для 
проверки наличия определенных данных в ответах, 
например, 
для извлечения токенов доступа или других важных данных, 
которые могут быть использованы в последующих запросах.
'''


#### Пример: Извлечение токена доступа из ответа сервера
import re

response = '{"access_token": "abcd1234", "expires": "3600"}'
token = re.findall(r'"access_token":\s?"(\w+)"', response)
if token:
    print("Токен доступа:", token[0])


'''
Использование регулярных выражений в автоматизации и 
автотестах значительно упрощает работу с текстовыми данными, 
повышая эффективность и надежность тестирования.
'''

