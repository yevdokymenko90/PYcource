#while
i = 10

while i < 50:
    print(i)
    i += 10
    
    
'''
The provided Python script uses a `while` loop 
to print numbers in increments of 10 from 10 to 50.

The script starts by defining a variable `i` 
and assigning it the value `10`. 
It then enters a `while` loop that continues as long 
as `i` is less than `50`.

Inside the `while` loop, 
the script first prints the current value of `i` 
using the `print()` function. 
The `print()` function is a built-in Python 
function that outputs text to the console. 
In this case, it's used to print the value of `i`.

After printing, the script increments `i` by `10` 
using the `+=` operator. 
This operator is a shorthand for `i = i + 10`, 
meaning it adds `10` to the current value of `i` 
and assigns the result back to `i`.

The loop then checks the condition `i < 50` again. 
If `i` is still less than `50`, 
it repeats the loop and prints the new value of `i`. 
This continues until `i` is no longer less than `50`, 
at which point the loop ends.

The output of this script will be the numbers `10`, `20`, `30`, 
and `40` printed on separate lines. 
The number `50` is not printed because the loop condition is `i < 50`, 
so the loop ends when `i` becomes `50`.

В данном случае он используется для вывода значения `i`.

После печати скрипт увеличивает `i` на `10` с помощью оператора `+=`. 
Этот оператор является сокращением для `i = i + 10`, 
что означает, 
что он добавляет `10` к текущему значению `i` 
и присваивает результат обратно `i`.

Затем цикл проверяет условие `i < 50` снова. 
Если `i` все еще меньше `50`, 
он повторяет цикл и печатает новое значение `i`. 
Это продолжается до тех пор, 
пока `i` не станет больше или равно `50`, 
после чего цикл завершается.

Выводом этого скрипта будут числа `10`, `20`, `30` и `40`, 
напечатанные на отдельных строках. 
Число `50` не печатается, 
потому что условие цикла - `i < 50`, 
поэтому цикл завершается, когда `i` становится `50`.

'''


'''


Цикл while выполняется до тех пор, 
пока условие остается истинным. 
Вот пример с комментариями и пошаговыми разъяснениями:

'''

# Начинаем с инициализации переменной-счетчика
counter = 0

# Цикл while будет выполняться, пока значение counter меньше 5
while counter < 5:
    # Вывод текущего значения counter
    print(f"Текущее значение счетчика: {counter}")

    # Увеличение counter на 1
    counter += 1

# После выхода из цикла, выводим сообщение
print("Цикл завершен")


'''

### Пошаговые разъяснения:

1. **Инициализация счетчика**: `counter = 0`. 
Эта строка задает начальное значение переменной `counter`, 
которая будет использоваться для отслеживания количества выполненных итераций цикла.

2. **Условие цикла**: `while counter < 5`. 
Цикл `while` продолжается до тех пор, 
пока это условие истинно. 
В данном случае, пока значение `counter` меньше 5.

3. **Тело цикла**:
   - `print(f"Текущее значение счетчика: {counter}")`. 
   Это команда выводит текущее значение `counter`.
   - `counter += 1`. 
   Это увеличивает значение `counter` на 1. 
   Это важно для изменения условия цикла и 
   в конечном итоге для его завершения.

4. **Завершение цикла**: 
Как только `counter` достигает 5, 
условие `counter < 5` становится ложным, 
и цикл завершается.

5. **После цикла**: После выхода из цикла, 
программа выводит сообщение `"Цикл завершен"`, 
сигнализируя о том, что выполнение цикла полностью завершено.

Это базовый пример использования цикла `while`. 
Циклы `while` полезны, 
когда количество итераций заранее неизвестно 
или когда необходимо выполнять цикл до наступления определенного события.

'''

'''
Использование `break` в цикле `while` позволяет нам преждевременно выйти из цикла, даже если условие цикла остается истинным. Вот пример с комментариями и пошаговыми разъяснениями:
'''

# Инициализируем счетчик
counter = 0

# Начинаем бесконечный цикл while
while True:
    # Проверяем, достиг ли счетчик определенного значения
    if counter == 5:
        # Если достиг, прерываем цикл
        break

    # Выводим текущее значение счетчика
    print(f"Текущее значение счетчика: {counter}")

    # Увеличиваем счетчик
    counter += 1

# Сообщаем об окончании цикла
print("Цикл прерван командой break")


'''
### Пошаговые разъяснения:

1. **Инициализация счетчика**: 
`counter = 0`. 
Устанавливаем начальное значение счетчика.

2. **Начало цикла**: 
`while True`. 
Это бесконечный цикл, 
который будет выполняться до тех пор, 
пока явно не будет прерван.

3. **Проверка условия для выхода**:
   - `if counter == 5:`. 
   Это условие проверяет, 
   достиг ли счетчик определенного значения 
   (в данном случае 5).
   - Если условие выполняется (`counter` равен 5), 
   выполнение кода переходит к строке `break`.

4. **Прерывание цикла**: 
`break`. 
Этот оператор немедленно прерывает цикл, 
даже если основное условие цикла (`while True`) 
остается истинным.

5. **Тело цикла**:
   - `print(f"Текущее значение счетчика: {counter}")`. 
   Это выводит текущее значение `counter`.
   - `counter += 1`. 
   Это увеличивает `counter` на 1 на каждой итерации.

6. **Код после цикла**: 
После того как цикл прерывается командой `break`, 
выполнение программы продолжается со следующей строки после цикла. 
В данном случае, 
это `print("Цикл прерван командой break")`, 
что сообщает о прерывании цикла.

Этот пример демонстрирует, 
как `break` используется для контроля над выполнением цикла `while`, 
позволяя выйти из него в зависимости от 
выполнения определенных условий внутри тела цикла.

'''


'''

Использование `continue` в цикле `while` 
позволяет пропустить оставшуюся часть текущей итерации и 
перейти сразу к следующей итерации цикла. 
Давайте рассмотрим пример, 
где мы будем выводить только нечетные числа в заданном диапазоне:

'''
# Инициализация счетчика
counter = 0

# Цикл while выполняется, пока счетчик меньше 10
while counter < 10:
    # Увеличиваем счетчик на 1 на каждой итерации
    counter += 1

    # Проверяем, является ли текущее значение счетчика четным
    if counter % 2 == 0:
        # Если да, пропускаем оставшуюся часть текущей итерации
        continue

    # Выводим текущее значение счетчика, если оно нечетное
    print(f"Нечетное число: {counter}")

# Сообщаем об окончании цикла
print("Цикл завершен")

'''
### Пошаговые разъяснения:

1. **Инициализация счетчика**: `counter = 0`. 
Устанавливаем начальное значение счетчика.

2. **Условие цикла**: `while counter < 10`. 
Цикл будет выполняться до тех пор, пока значение счетчика меньше 10.

3. **Увеличение счетчика**: `counter += 1`. 
С каждой итерацией цикла значение счетчика увеличивается на 1.

4. **Проверка на четность**:
   - `if counter % 2 == 0:`. 
   Это условие проверяет, является ли текущее значение счетчика четным.
   - Если условие выполняется, выполнение кода переходит к строке `continue`.

5. **Применение continue**: 
`continue`. 
Этот оператор пропускает оставшуюся часть текущей итерации и 
переходит сразу к проверке условия цикла (`while counter < 10`).

6. **Вывод нечетных чисел**: 
Если текущее значение счетчика нечетное, 
выполнение кода доходит до строки 
`print(f"Нечетное число: {counter}")`, 
и программа выводит это число.

7. **Код после цикла**: 
После того как условие цикла 
(`counter < 10`) становится ложным, 
цикл завершается, 
и программа продолжается со следующей строки после цикла. 
В данном случае, это `print("Цикл завершен")`.

Этот пример демонстрирует, 
как `continue` используется для управления выполнением цикла `while`, 
позволяя пропускать определенные итерации цикла на основе 
выполнения конкретных условий в теле цикла.
'''

