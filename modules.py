#modules

def print_sum(a, b):
    print(a + b)
    
    
my_name = "John"


'''
Модули в Python — это файлы с расширением `.py`, 
содержащие определения функций, классов и переменных, 
а также исполняемый код. 
Модули позволяют структурировать программу на Python 
на несколько файлов для лучшей организации и 
повторного использования кода. 
Вы можете импортировать модуль в другой модуль или в 
интерактивный интерпретатор Python, 
чтобы получить доступ к его функциям, 
классам и переменным.

### Использование Модулей

Для использования модуля в программе Python 
используйте ключевое слово `import` 
с именем модуля. 
После этого вы сможете обращаться к элементам модуля через точку.

**Пример:**

Если у вас есть файл `math_utils.py` с содержимым:

'''
# math_utils.py

def add(a, b):
    return a + b

def multiply(a, b):
    return a * b

'''
Вы можете импортировать и использовать этот модуль в другом Python-скрипте:
'''

import math_utils

result = math_utils.add(10, 5)
print(result)  # 15

result = math_utils.multiply(10, 5)
print(result)  # 50


### Импорт Специфичных Функций
'''
Можно импортировать конкретные функции или классы из модуля, 
что позволяет обращаться к ним напрямую без указания имени модуля.
'''

from math_utils import add, multiply

result = add(10, 5)
print(result)  # 15


### Импорт с Псевдонимом
'''
Вы можете импортировать модуль 
или его содержимое под другим именем 
с использованием ключевого слова `as`. 
Это может быть полезно для сокращения имени или избежания конфликтов имен.
'''

import math_utils as mu

result = mu.add(10, 5)
print(result)  # 15


### Создание Собственных Модулей
'''
Любой файл Python `.py` может быть модулем. 
Вы можете создать свой собственный модуль, 
просто поместив в файл Python-код, 
и затем импортировать этот файл в других частях программы.
'''
### Стандартная Библиотека Python
'''
Python поставляется с обширной стандартной библиотекой, 
состоящей из множества модулей, 
предоставляющих доступ к системным функциям, 
типам данных и другим утилитам, 
таким как модуль `math` 
для математических операций, 
`os` для взаимодействия с операционной системой, 
`sys` для работы с объектами, 
связанными с интерпретатором Python, и многие другие.

Модули улучшают структуру программы и ее поддержку, 
позволяя организовать код более логично и повышая его читаемость и переиспользование.
'''


'''
Давайте рассмотрим еще несколько примеров 
использования модулей в Python 
для решения различных задач. 
Эти примеры помогут понять, 
как модули могут улучшить структуру вашего кода и 
сделать его более модульным и легко переиспользуемым.

### Пример 1: Работа с Временем и Датами

Python предлагает модуль 
`datetime` 
для управления датами и временем.
Давайте используем его для 
выполнения некоторых базовых операций с датами:
'''

from datetime import datetime, timedelta

# Получение текущей даты и времени
now = datetime.now()
print("Текущие дата и время:", now)

# Добавление времени к текущей дате
one_week = timedelta(weeks=1)
future = now + one_week
print("Дата и время через неделю:", future)

# Разница между двумя датами
difference = future - now
print("Разница между датами:", difference)


### Пример 2: Генерация Случайных Чисел
'''
Модуль 
`random` 
предоставляет инструменты для 
генерации случайных чисел. 
Вот пример его использования:
'''

import random

# Случайное число от 1 до 10
print("Случайное число от 1 до 10:", random.randint(1, 10))

# Случайный элемент из списка
items = ['Красный', 'Синий', 'Зеленый']
print("Случайный элемент из списка:", random.choice(items))

# Перемешивание списка
random.shuffle(items)
print("Перемешанный список:", items)

### Пример 3: Работа с Файловой Системой
'''
Модуль `os` позволяет взаимодействовать 
с операционной системой, 
включая работу с файловой системой:
'''

import os

# Текущая рабочая директория
current_dir = os.getcwd()
print("Текущая рабочая директория:", current_dir)

# Создание новой директории
os.mkdir('new_directory')

# Проверка существования файла или директории
exists = os.path.exists('new_directory')
print("Директория 'new_directory' существует:", exists)


### Пример 4: Использование Математических Функций
'''
Модуль `math` предоставляет доступ к математическим функциям:
'''

import math

# Корень числа
print("Квадратный корень из 16:", math.sqrt(16))

# Округление вверх
print("Округление 2.3 вверх:", math.ceil(2.3))

# Округление вниз
print("Округление 2.7 вниз:", math.floor(2.7))

'''
Эти примеры демонстрируют, 
как стандартные модули Python могут быть использованы 
для решения различных задач, 
связанных с датами и временем, 
генерацией случайных чисел, 
взаимодействием с файловой системой и 
выполнением математических расчетов.
Использование модулей делает код более читаемым, 
понятным и легко поддерживаемым.
'''

