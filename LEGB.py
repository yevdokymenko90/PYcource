'''
Области видимости в Python определяют, 
где и как переменные могут быть "видимы" или доступны в вашем коде. 
В Python существуют четыре уровня областей видимости: 
локальная (Local), 
обрамляющая (Enclosing), 
глобальная (Global) и 
встроенная (Built-in) - часто суммируемые аббревиатурой LEGB.

'''


# Глобальная переменная
global_var = "Я глобальная переменная"

def outer_function():
    # Обрамляющая переменная
    enclosing_var = "Я обрамляющая переменная"

    def inner_function():
        # Локальная переменная
        local_var = "Я локальная переменная"

        # Доступ к локальной переменной
        print(local_var)  # Локальная область видимости

        # Доступ к обрамляющей переменной из вложенной функции
        print(enclosing_var)  # Обрамляющая область видимости

    inner_function()

    # Доступ к обрамляющей переменной, но не к локальной переменной inner_function
    print(enclosing_var)  # Обрамляющая область видимости
    # print(local_var)  # Это вызовет ошибку, так как local_var не доступна здесь

# Доступ к глобальной переменной
print(global_var)  # Глобальная область видимости

# Вызов функции
outer_function()

# Демонстрация встроенной области видимости
print(len("Это встроенная функция"))  # Встроенная область видимости

'''
Объяснение Кода:
Глобальная Область Видимости:

global_var определена в самом верхнем уровне скрипта, поэтому она является глобальной переменной и доступна в любом месте кода после её объявления.
Обрамляющая Область Видимости:

enclosing_var определена в функции outer_function. Это обрамляющая переменная для inner_function.
Локальная Область Видимости:

local_var определена внутри inner_function и доступна только в рамках этой функции.
Встроенная Область Видимости:

Пример использования встроенной функции - len(). Встроенная область видимости включает в себя функции и атрибуты, предоставляемые интерпретатором Python.
Доступ и Видимость Переменных:

Каждая функция может обращаться к переменным в своей локальной области видимости, 
области видимости обрамляющей функции, глобальной области и встроенной области. 
Однако они не могут обращаться к локальным переменным других функций.
Этот пример демонстрирует, как Python ищет переменные, 
начиная с локальной области видимости и продвигаясь вверх через обрамляющую, 
глобальную и встроенную области. Это помогает понять, 
как и где определить переменные для оптимальной структуры и доступности в вашем коде.
'''

'''
Области видимости в автоматизации тестирования, особенно при использовании Python, 
играют важную роль в организации и управлении доступностью переменных и функций в разных частях тестового кода. 
Понимание областей видимости помогает в написании чистого, 
модульного и легко поддерживаемого кода, что является ключевым в автоматизации тестирования.

Давайте рассмотрим пример, 
который иллюстрирует использование различных областей видимости в контексте автоматического тестирования 
с использованием Python и библиотеки pytest:
Пример: Тестирование Веб-Приложения с Разными Областями Видимости
'''

import pytest
from selenium import webdriver

# Глобальная переменная (Глобальная область видимости)
global_driver_path = "/path/to/chromedriver"

@pytest.fixture(scope="session")
def browser():
    """
    Фикстура pytest для инициализации веб-драйвера.
    Доступна на уровне сессии (все тесты в данной сессии).
    """
    # Использование глобальной переменной в фикстуре
    driver = webdriver.Chrome(executable_path=global_driver_path)
    yield driver
    driver.quit()

def test_example(browser):
    """
    Пример теста, использующего фикстуру 'browser'.
    """
    # Локальная переменная (Локальная область видимости)
    url = "https://www.example.com"
    browser.get(url)
    assert browser.current_url == url

class TestGroup:
    """
    Тестовый класс, группирующий несколько тестов.
    """
    class_var = "https://www.example2.com"  # Переменная класса (Обрамляющая область видимости)

    def test_in_class(self, browser):
        """
        Тест внутри тестового класса.
        """
        browser.get(self.class_var)
        assert browser.current_url == self.class_var

# Выполнение тестов с помощью команды 'pytest' в командной строке

'''
Объяснение Кода:

Глобальная Область Видимости:
global_driver_path - глобальная переменная, определенная в самом верхнем уровне скрипта, 
доступна в любой части кода после её объявления.


Фикстура browser:
Это фикстура pytest, использующая глобальную переменную для инициализации webdriver.
Фикстура определена с областью видимости session, что означает, 
что экземпляр driver будет одинаковым для всех тестов в данной сессии.

Локальная Область Видимости в Функции:
В функции test_example определена локальная переменная url, 
которая доступна только в рамках этой функции.

Обрамляющая Область Видимости в Классе:
class_var - это переменная класса TestGroup, которая доступна для всех методов внутри этого класса.
В методе test_in_class используется self.class_var для доступа к переменной класса.
Этот пример показывает, как использование различных областей видимости может помочь в организации тестов, 
обеспечивая чистоту и модульность кода, что очень важно в автоматизации тестирования.
'''
