'''
В Python существует ряд значений, которые рассматриваются как "ложные" (False) в булевом контексте. 
Эти ложные значения включают в себя:

Логическое значение False.
Любое числовое значение равное 0 (ноль).
Пустые коллекции, такие как 
[] (пустой список), 
() (пустой кортеж), 
{} (пустой словарь), 
set() (пустое множество).
None, который представляет отсутствие значения.
Пустые строки, например "".
В контексте условных операторов и других булевых выражений, 
эти значения оцениваются как False. 
Вот пример кода, демонстрирующего это поведение с комментариями:

'''

# Примеры ложных значений в Python

# 1. Логическое значение False
false_value = False

# 2. Число 0
zero_int = 0
zero_float = 0.0

# 3. Пустые коллекции
empty_list = []
empty_tuple = ()
empty_dict = {}
empty_set = set()

# 4. None
none_value = None

# 5. Пустая строка
empty_string = ""

# Проверка каждого значения на ложность

# В каждом случае условие if не выполнится, так как все значения являются ложными
if false_value:
    print("False is True")
else:
    print("False is False")  # Этот блок будет выполнен

if zero_int:
    print("0 (int) is True")
else:
    print("0 (int) is False")  # Этот блок будет выполнен

if zero_float:
    print("0.0 (float) is True")
else:
    print("0.0 (float) is False")  # Этот блок будет выполнен

if empty_list:
    print("[] is True")
else:
    print("[] is False")  # Этот блок будет выполнен

if empty_tuple:
    print("() is True")
else:
    print("() is False")  # Этот блок будет выполнен

if empty_dict:
    print("{} is True")
else:
    print("{} is False")  # Этот блок будет выполнен

if empty_set:
    print("set() is True")
else:
    print("set() is False")  # Этот блок будет выполнен

if none_value:
    print("None is True")
else:
    print("None is False")  # Этот блок будет выполнен

if empty_string:
    print('"" is True')
else:
    print('"" is False')  # Этот блок будет выполнен


'''
Этот код проходит через различные значения, 
которые считаются ложными в Python, и проверяет их в условном операторе if. 
В каждом случае условие if не выполняется, 
\так как проверяемые значения являются ложными.

Выбранный Python скрипт демонстрирует концепцию "ложных" значений в Python. 
"Ложное" значение - это значение, которое считается ложным, когда оно встречается в булевом контексте. 
Все значения считаются "истинными", за исключением предопределенных "ложных" значений.

Скрипт сначала определяет несколько примеров "ложных" значений:

1. Булево значение `False`.
2. Целое число `0` и вещественное число `0.0`.
3. Пустые коллекции, включая пустой список `[]`, пустой кортеж `()`, пустой словарь `{}`, и пустое множество `set()`.
4. Специальное значение `None`.
5. Пустая строка `""`.

Затем скрипт проверяет каждое из этих значений в условном операторе `if`. 
Поскольку все эти значения являются "ложными", 
условие в операторе `if` оценивается как `False`, 
и выполняется код в блоке `else`. 
Вывод каждого оператора `print` подтверждает, что значение действительно является "ложным".

Функция `print` - это встроенная функция Python, 
которая выводит указанное сообщение на экран. 
Сообщение может быть строкой или любым другим объектом, 
функция `print` преобразует объект в строку перед его записью на экран.

Класс `set` - это встроенный класс Python, 
который предоставляет изменяемую коллекцию уникальных элементов. 
Пустое множество считается "ложным" значением.

'''

'''
Ложные значения в Python:

В Python определены несколько типов значений, 
которые считаются "ложными" (False) при использовании в булевом контексте. 

Эти ложные значения включают в себя:

1. Логическое значение False
   - False является прямым представлением ложного значения в булевой логике.

2. Числовые значения, равные 0
   - Это включает в себя 0 в целочисленном формате и 0.0 в формате с плавающей точкой.
   - Все числовые значения, равные нулю, считаются ложными.

3. Пустые коллекции
   - К пустым коллекциям относятся пустой список ([]), 
   пустой кортеж (()), пустой словарь ({}) и пустое множество (set()).
   - Эти типы коллекций, когда они пусты, оцениваются как ложные.

4. None
   - None в Python представляет отсутствие значения или ничего.
   - Это считается ложным, так как представляет "ничего" или "отсутствие значения".

5. Пустые строки
   - Пустая строка ("") также считается ложной, так как она не содержит никаких символов.

Проверка ложных значений в условиях:

Для каждого из перечисленных ложных значений можно провести проверку с помощью условного оператора if. 
В каждом случае условие не будет выполнено, так как значение в условии является ложным.

Пример кода:

# Пример проверки ложных значений
if false_value:
    # Этот блок кода не будет выполнен, так как false_value является False
else:
    # Этот блок кода будет выполнен

Аналогичные проверки выполняются для каждого из типов ложных значений 
(0, пустые коллекции, None, пустые строки), демонстрируя их ложность в булевом контексте.
'''

# Примеры использования двойного отрицания (not not)

# Истинное значение
true_value = 1  # В булевом контексте 1 считается True
converted_true = not not true_value  # Преобразует в True
print("Истинное значение (1) после двойного отрицания:", converted_true)  # Выведет: True

# Ложное значение
false_value = 0  # В булевом контексте 0 считается False
converted_false = not not false_value  # Преобразует в False
print("Ложное значение (0) после двойного отрицания:", converted_false)  # Выведет: False

# Пустая строка (ложное значение)
empty_string = ""
converted_empty_string = not not empty_string  # Преобразует в False
print("Пустая строка после двойного отрицания:", converted_empty_string)  # Выведет: False

# Непустая строка (истинное значение)
non_empty_string = "Python"
converted_non_empty_string = not not non_empty_string  # Преобразует в True
print("Непустая строка после двойного отрицания:", converted_non_empty_string)  # Выведет: True


'''
Двойное Отрицание (not not) в Python:

Двойное отрицание "not not" используется для приведения значения к его булевому эквиваленту. 
Это означает, что любое "истинное" (truthy) значение будет преобразовано в `True`, а любое "ложное" (falsy) значение - в `False`.

1. Истинное значение:

   - В булевом контексте ненулевые числа считаются "истинными".
   - Применение `not not` к таким значениям возвращает `True`.

2. Ложное значение:

   - Нулевые значения (например, 0 или 0.0) считаются "ложными".
   - Применение `not not` к таким значениям возвращает `False`.

3. Пустая строка:

   - Пустая строка ("") считается "ложной".
   - Применение `not not` к пустой строке возвращает `False`.

4. Непустая строка:

   - Любая непустая строка считается "истинной".
   - Применение `not not` к непустой строке возвращает `True`.

Пример кода:

# Истинное значение
true_value = 1
converted_true = not not true_value
print("Истинное значение (1) после двойного отрицания:", converted_true)

# Ложное значение
false_value = 0
converted_false = not not false_value
print("Ложное значение (0) после двойного отрицания:", converted_false)

# Пустая строка
empty_string = ""
converted_empty_string = not not empty_string
print("Пустая строка после двойного отрицания:", converted_empty_string)

# Непустая строка
non_empty_string = "Python"
converted_non_empty_string = not not non_empty_string
print("Непустая строка после двойного отрицания:", converted_non_empty_string)

Этот код демонстрирует использование двойного отрицания для преобразования различных значений в их булев эквивалент. 
Это полезно для гарантирования, что значение имеет булев тип данных.
'''


from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException

# Настройка веб-драйвера
driver = webdriver.Chrome()
driver.get("https://example.com")

def is_element_present(element_id):
    """
    Проверяет наличие элемента на странице.

    Использует двойное отрицание для преобразования результата 
    поиска элемента в булево значение.
    """
    try:
        driver.find_element_by_id(element_id)
        return True
    except NoSuchElementException:
        return False

# Проверка наличия элемента на странице
element_id = "some-element-id"
element_present = not not is_element_present(element_id)

print(f"Элемент с ID '{element_id}' присутствует на странице:", element_present)

# Закрытие браузера
driver.quit()





"""
Объяснение Кода:
Настройка WebDriver:

Используется Selenium WebDriver для открытия браузера и перехода на указанный URL.
Функция is_element_present:

Эта функция проверяет наличие элемента на странице по его идентификатору.
В случае успешного нахождения элемента, функция возвращает True. 
Если элемент не найден, генерируется исключение NoSuchElementException, 
и функция возвращает False.
Использование not not для Проверки Наличия Элемента:

element_present использует результат функции is_element_present 
и применяет к нему двойное отрицание not not.
Это гарантирует, что element_present будет строго булевым значением (True или False).
Этот подход с использованием not not полезен, 
когда требуется гарантировать, что результат проверки является явно булевым значением, 
что делает код более читаемым и однозначным, особенно в больших и сложных тестовых сценариях.


Демонстрация Использования 'not not' в Автотестах с Selenium



Цель этого скрипта - продемонстрировать, 
как двойное отрицание 'not not' может быть использовано в автоматизированных тестах 
для преобразования значений в строго булев тип. 
Это особенно полезно в контексте условий и проверок в тестах с Selenium.

Методы:
- is_element_present: Проверяет наличие элемента на странице и возвращает булево значение.

Примеры использования:
- Проверка наличия элемента на веб-странице с использованием функции is_element_present.
- Использование 'not not' для гарантии, что результат будет строго булевым значением.
"""

from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException

def is_element_present(driver, element_id):
    """
    Проверяет наличие элемента на странице.

    :param driver: Экземпляр веб-драйвера Selenium.
    :param element_id: ID элемента для поиска на странице.
    :return: True, если элемент найден, иначе False.
    """
    try:
        driver.find_element_by_id(element_id)
        return True
    except NoSuchElementException:
        return False

# Настройка веб-драйвера
driver = webdriver.Chrome()
driver.get("https://example.com")

# Проверка наличия элемента на странице
element_id = "some-element-id"
element_present = not not is_element_present(driver, element_id)

print(f"Элемент с ID '{element_id}' присутствует на странице:", element_present)

# Закрытие браузера
driver.quit()



 '''
 В Python, как и во многих других языках программирования, 
 условные инструкции if используются для выполнения кода на основе определенных условий. 
 В контексте этих условий "ложные значения" играют ключевую роль, 
 определяя, будет ли выполнен блок кода внутри if.

Ложные значения в Python включают:

Логическое значение False.
Любое числовое значение, равное 0 (ноль).
Пустые коллекции, такие как 
[] (пустой список), () (пустой кортеж), {} (пустой словарь), set() (пустое множество).
None, который представляет отсутствие значения.
Пустые строки ("").
Если в условии if используется одно из этих ложных значений, 
то блок кода внутри if не будет выполнен.

Примеры Использования Ложных Значений в Условных Инструкциях if
 '''
 
 # Ложное значение - False
if False:
    print("Это не будет напечатано")

# Ложное значение - 0
if 0:
    print("Это также не будет напечатано")

# Пустой список
empty_list = []
if empty_list:
    print("Пустой список считается ложным")

# None
if None:
    print("None также является ложным значением")

# Пустая строка
if "":
    print("Пустая строка не приведет к выполнению этого кода")

# Все эти условия являются ложными, следовательно, код внутри блоков 'if' не будет выполнен.

"""
Демонстрация Использования Ложных Значений в Условных Инструкциях 'if' в Python

Этот скрипт иллюстрирует, как различные ложные значения влияют на выполнение условных инструкциях 'if'. 
В Python существует несколько типов значений, которые оцениваются как ложные (False) в булевом контексте. 
В условных инструкциях 'if' эти ложные значения приводят к тому, что блок кода внутри 'if' не выполняется.

Ложные значения включают в себя:
1. Логическое значение False.
2. Числовые значения, равные 0 (ноль).
3. Пустые коллекции (например, пустой список [], пустой кортеж (), пустой словарь {}, пустое множество set()).
4. None, представляющий отсутствие значения.
5. Пустые строки ("").

Примеры:

1. Если условие 'if' содержит логическое значение False, блок кода внутри 'if' не выполняется.
2. Если числовое значение в условии равно 0, код внутри 'if' также не выполняется.
3. Пустые коллекции оцениваются как False, следовательно, соответствующий блок кода не будет выполнен.
4. None в условии 'if' также приводит к невыполнению блока кода.
5. Пустая строка в условии 'if' оценивается как False, и код внутри 'if' не выполняется.

Код:
"""

# Ложное значение - False
if False:
    print("Это не будет напечатано")

# Ложное значение - 0
if 0:
    print("Это также не будет напечатано")

# Пустой список
empty_list = []
if empty_list:
    print("Пустой список считается ложным")

# None
if None:
    print("None также является ложным значением")

# Пустая строка
if "":
    print("Пустая строка не приведет к выполнению этого кода")

# Заключение:
# В этих примерах видно, что блок кода внутри каждого 'if' не выполняется, так как условие оценивается как False.

'''
Давайте рассмотрим пример использования ложных значений в условных инструкциях if 
в контексте автоматизированных тестов с использованием Python и Selenium. 
В этом примере мы будем проверять наличие определенных элементов на веб-странице, 
и в зависимости от результата, выполнять определенные действия.

Пример: Проверка Наличия Элементов в Автотестах
'''
from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException

# Настройка веб-драйвера
driver = webdriver.Chrome()
driver.get("https://example.com")

def check_element_presence(element_id):
    """
    Проверяет наличие элемента на странице.

    :param element_id: ID элемента для проверки.
    :return: Возвращает True, если элемент присутствует, иначе False.
    """
    try:
        driver.find_element_by_id(element_id)
        return True
    except NoSuchElementException:
        return False

# ID элементов для проверки
element_id_1 = "myElement1"
element_id_2 = "myElement2"

# Проверка наличия элементов на странице
if check_element_presence(element_id_1):
    print(f"Элемент с ID {element_id_1} присутствует на странице.")
else:
    print(f"Элемент с ID {element_id_1} отсутствует на странице.")

if not check_element_presence(element_id_2):
    print(f"Элемент с ID {element_id_2} отсутствует на странице.")
else:
    print(f"Элемент с ID {element_id_2} присутствует на странице.")

# Закрытие браузера
driver.quit()

'''
Объяснение Кода:
Настройка WebDriver и Открытие Страницы:

С помощью Selenium WebDriver открывается браузер, и происходит переход на указанный URL.
Функция check_element_presence:

Эта функция пытается найти элемент по его ID. 
Если элемент найден, функция возвращает True, 
в противном случае (если элемент не найден и возникает исключение NoSuchElementException) возвращается False.

Использование Ложных Значений в Условиях if:

Первое условие if проверяет, присутствует ли элемент с element_id_1 на странице. 
Если функция check_element_presence возвращает True (элемент найден), выполняется код внутри блока if.
Второе условие if с оператором not использует логику "если элемент не найден". 
Если check_element_presence возвращает False 
(элемент не найден), условие if not становится True, и выполняется соответствующий блок кода.
Этот пример демонстрирует, 
как ложные значения и их отрицания могут быть использованы 
в условных инструкциях if в автотестах для проверки наличия или 
отсутствия элементов на веб-странице.
'''

"""
Использование Ложных Значений в Условных Инструкциях 'if' в Автотестах

Этот скрипт демонстрирует, как ложные значения могут быть использованы в условных инструкциях 'if' в автоматизированных тестах с использованием Selenium. 
Основная цель - проверить наличие или отсутствие определенных элементов на веб-странице и выполнить соответствующие действия на основе этих проверок.

Функции:
- check_element_presence: Проверяет наличие элемента на странице по его ID. Возвращает True, если элемент присутствует, иначе False.

Процесс:
1. Инициализация веб-драйвера и переход на заданный URL.
2. Проверка наличия элементов на странице с использованием функции check_element_presence.
3. Использование условных инструкций 'if' и 'if not' для выполнения различных блоков кода в зависимости от результата проверки.

Примеры использования:
- В первом условии 'if' проверяется наличие элемента. Если элемент присутствует (True), выполняется код в блоке 'if'.
- Во втором условии 'if not' проверяется отсутствие элемента. 
Если элемент отсутствует (False), условие 'if not' становится True, и выполняется соответствующий блок кода.

Эта документация в коде описывает цель и логику скрипта, объясняя, 
как функция check_element_presence используется для проверки наличия элементов на веб-странице, 
а также как условные инструкции if и if not применяются для определения дальнейших действий в зависимости от результатов проверки. 
Это обеспечивает ясность и понимание кода, что улучшает его поддерживаемость и читаемость.

"""

from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException

def check_element_presence(driver, element_id):
    """
    Проверяет наличие элемента на странице.

    :param driver: Экземпляр веб-драйвера Selenium.
    :param element_id: ID элемента для проверки.
    :return: True, если элемент присутствует, иначе False.
    """
    try:
        driver.find_element_by_id(element_id)
        return True
    except NoSuchElementException:
        return False

# Инициализация веб-драйвера
driver = webdriver.Chrome()
driver.get("https://example.com")

# Проверка наличия элементов на странице
element_id_1 = "myElement1"
element_id_2 = "myElement2"

if check_element_presence(driver, element_id_1):
    print(f"Элемент с ID {element_id_1} присутствует на странице.")
else:
    print(f"Элемент с ID {element_id_1} отсутствует на странице.")

if not check_element_presence(driver, element_id_2):
    print(f"Элемент с ID {element_id_2} отсутствует на странице.")
else:
    print(f"Элемент с ID {element_id_2} присутствует на странице.")

# Закрытие браузера
driver.quit()


'''
Логические операторы в Python используются для объединения нескольких булевых выражений (условий) и состоят из трех основных операторов: and, or, not.

and: Возвращает True, если оба выражения истинны.
or: Возвращает True, если хотя бы одно из выражений истинно.
not: Инвертирует булево значение (из True делает False и наоборот).
Вот пример кода с использованием этих логических операторов и подробными комментариями:

'''

'''
Демонстрация Логических Операторов в Python

Логические операторы and, or, not используются для создания сложных логических выражений.
'''

# Логический оператор "and"
# Возвращает True только если оба условия истинны
condition1 = True
condition2 = False
result_and = condition1 and condition2  # False, так как одно условие ложно

# Логический оператор "or"
# Возвращает True если хотя бы одно условие истинно
result_or = condition1 or condition2  # True, так как одно условие истинно

# Логический оператор "not"
# Инвертирует булево значение
result_not = not condition1  # False, так как condition1 истинно

print("Результат оператора and:", result_and)
print("Результат оператора or:", result_or)
print("Результат оператора not:", result_not)

# Пример использования в комбинации
# Проверяем, что condition1 истинно, а condition2 ложно
combined_condition = condition1 and not condition2  # True
print("Комбинированный результат:", combined_condition)


'''
Объяснение Кода:
Оператор and: В первом примере проверяются два условия (condition1 и condition2). 
Оператор and возвращает True только если оба условия истинны. В нашем случае result_and будет False, так как condition2 ложно.

Оператор or: Здесь оператор or возвращает True, так как хотя бы одно из условий (condition1) истинно.

Оператор not: Инвертирует булево значение condition1. Так как condition1 истинно, result_not становится False.

Комбинация Операторов: 
В последнем примере демонстрируется комбинирование логических операторов. 
Условие combined_condition возвращает True, так как condition1 истинно и одновременно condition2 ложно (not condition2 возвращает True).

'''

# Демонстрация использования логических операторов в Python

# Логический оператор "and"
# Оператор "and" возвращает True, только если оба его операнда истинны
condition1 = True
condition2 = False
result_and = condition1 and condition2  # False, так как condition2 ложно

# Комментарий: В данном случае, несмотря на то что condition1 истинно, 
# результат выражения становится False из-за condition2, который ложен.

# Логический оператор "or"
# Оператор "or" возвращает True, если хотя бы один из операндов истинен
result_or = condition1 or condition2  # True, так как condition1 истинно

# Комментарий: Здесь, поскольку condition1 истинно, результатом всего выражения
# независимо от значения condition2 будет True.

# Логический оператор "not"
# Оператор "not" инвертирует булево значение своего операнда
result_not = not condition1  # False, так как condition1 истинно

# Комментарий: Используя "not", мы меняем истинное значение condition1 на False.

# Комбинирование логических операторов
# Комбинирование "and" и "not" для формирования сложного условия
combined_condition = condition1 and not condition2  # True

# Комментарий: В данном случае, combined_condition будет True, так как condition1 истинно,
# и condition2 ложно, но его значение инвертируется оператором "not".

# Вывод результатов
print("Результат оператора and:", result_and)  # False
print("Результат оператора or:", result_or)  # True
print("Результат оператора not:", result_not)  # False
print("Комбинированный результат:", combined_condition)  # True



"""
Логические Операторы в Python

Этот скрипт демонстрирует использование основных логических операторов в Python: 'and', 'or' и 'not'. 
Логические операторы используются для создания сложных булевых выражений, которые могут управлять потоком исполнения программы (например, в условных инструкциях).

Основные Логические Операторы:
- and: Возвращает True только если оба операнда истинны.
- or: Возвращает True, если хотя бы один из операндов истинен.
- not: Инвертирует булево значение операнда.

Примеры использования:

1. Оператор 'and':
   - Выражение 'condition1 and condition2' возвращает True только тогда, когда оба условия истинны.
   - В данном случае выражение возвращает False, так как 'condition2' ложно.

2. Оператор 'or':
   - Выражение 'condition1 or condition2' возвращает True, если хотя бы одно из условий истинно.
   - Здесь выражение возвращает True, так как 'condition1' истинно.

3. Оператор 'not':
   - Выражение 'not condition1' инвертирует значение 'condition1'.
   - Поскольку 'condition1' истинно, результатом будет False.

4. Комбинирование операторов:
   - Сочетание 'condition1 and not condition2' использует оба оператора 'and' и 'not' для формирования комплексного условия.
   - Результат будет True, так как 'condition1' истинно и 'condition2' ложно.

Код:
"""
# Инициализация условий
condition1 = True
condition2 = False

# Пример использования 'and'
result_and = condition1 and condition2  # False

# Пример использования 'or'
result_or = condition1 or condition2  # True

# Пример использования 'not'
result_not = not condition1  # False

# Комбинирование 'and' и 'not'
combined_condition = condition1 and not condition2  # True

# Вывод результатов
print("Результат оператора and:", result_and)
print("Результат оператора or:", result_or)
print("Результат оператора not:", result_not)
print("Комбинированный результат:", combined_condition)

"""
Заключение:
Этот код демонстрирует, как логические операторы могут быть использованы для создания сложных условий в программировании на Python. Они являются важными инструментами для контроля логики программы.
"""



from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException

# Настройка веб-драйвера
driver = webdriver.Chrome()
driver.get("https://example.com")

def is_element_present(element_id):
    """
    Проверяет наличие элемента на странице.

    :param element_id: ID элемента для проверки.
    :return: Возвращает True, если элемент присутствует, иначе False.
    """
    try:
        driver.find_element_by_id(element_id)
        return True
    except NoSuchElementException:
        return False

# ID элементов для проверки
element_id_1 = "myElement1"
element_id_2 = "myElement2"

# Проверка наличия элементов на странице
element1_present = is_element_present(element_id_1)
element2_present = is_element_present(element_id_2)

# Использование логических операторов для формирования сложных условий
if element1_present and element2_present:
    print(f"Оба элемента {element_id_1} и {element_id_2} присутствуют.")
elif element1_present or element2_present:
    print(f"Один из элементов {element_id_1} или {element_id_2} присутствует.")
else:
    print(f"Ни один из элементов {element_id_1} и {element_id_2} не присутствует.")

# Закрытие браузера
driver.quit()


'''
Объяснение Кода:
Настройка WebDriver и Открытие Страницы:

С помощью Selenium WebDriver открывается браузер, 
и происходит переход на указанный URL.
Функция is_element_present:

Эта функция проверяет наличие элемента на странице по его ID. 
В случае нахождения элемента возвращается True, иначе, 
при возникновении исключения NoSuchElementException, возвращается False.
Проверка Наличия Элементов:

Выполняется проверка наличия двух элементов на странице.

Использование Логических Операторов:

С помощью оператора and проверяется, присутствуют ли оба элемента на странице одновременно.
С помощью оператора or проверяется, присутствует ли хотя бы один из элементов на странице.
В зависимости от результатов этих проверок, выполняются различные блоки кода, 
что демонстрирует использование логических операторов для формирования сложных условий.
Этот пример иллюстрирует, 
как логические операторы могут использоваться в автотестах для создания более сложных условий, 
основанных на наличии или отсутствии определенных элементов на веб-странице.
'''



"""
Использование Логических Операторов в Автотестах

Этот скрипт демонстрирует применение логических операторов 'and' и 'or' в автоматизированных тестах с использованием Selenium. 
Основная цель - проверить наличие нескольких элементов на веб-странице и выполнить различные действия в зависимости от результатов этих проверок.

Функции:
- is_element_present: Проверяет наличие элемента на странице по его ID и возвращает булево значение.

Процесс:
1. Инициализация веб-драйвера и переход на заданный URL.
2. Проверка наличия двух элементов на странице.
3. Использование логических операторов 'and' и 'or' для формирования комплексных условий в инструкциях 'if'.
4. Вывод соответствующих сообщений в зависимости от результатов проверок.

Примеры использования:
- Если оба элемента присутствуют на странице (оператор 'and'), выводится сообщение о присутствии обоих элементов.
- Если присутствует хотя бы один из элементов (оператор 'or'), выводится сообщение о присутствии одного из элементов.
- Если ни один из элементов не присутствует, выводится сообщение об их отсутствии.

Код:
"""

from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException

def is_element_present(driver, element_id):
    """
    Проверяет наличие элемента на странице.

    :param driver: Экземпляр веб-драйвера Selenium.
    :param element_id: ID элемента для проверки.
    :return: True, если элемент присутствует, иначе False.
    """
    try:
        driver.find_element_by_id(element_id)
        return True
    except NoSuchElementException:
        return False

# Инициализация веб-драйвера и переход на страницу
driver = webdriver.Chrome()
driver.get("https://example.com")

# Проверка наличия элементов
element_id_1 = "myElement1"
element_id_2 = "myElement2"
element1_present = is_element_present(driver, element_id_1)
element2_present = is_element_present(driver, element_id_2)

# Применение логических операторов
if element1_present and element2_present:
    print(f"Оба элемента {element_id_1} и {element_id_2} присутствуют.")
elif element1_present or element2_present:
    print(f"Один из элементов {element_id_1} или {element_id_2} присутствует.")
else:
    print(f"Ни один из элементов {element_id_1} и {element_id_2} не присутствует.")

# Закрытие браузера
driver.quit()

"""
Заключение:
Этот пример показывает, как логические операторы могут быть эффективно использованы в автотестах 
для создания условных конструкций, 
позволяющих реализовать различные сценарии проверки элементов на веб-страницах.
"""


"""
Демонстрация Логических Операторов 'and' и 'or' в Python

Логические операторы 'and' и 'or' являются операторами короткого замыкания. 
Это означает, что они оценивают выражения слева направо и прекращают вычисление, 
как только исход выражения становится очевидным.

- Оператор 'and' возвращает True, если оба его операнда истинны. 
Если первый операнд ложен, второй операнд даже не оценивается.
- Оператор 'or' возвращает True, если хотя бы один из его операндов истинен. 
Если первый операнд истинен, второй операнд не оценивается.
"""

# Пример использования оператора 'and'
# Пример с условием, которое может вызвать ошибку (деление на ноль), но благодаря 'and' этого не происходит
x = 0
y = 10

# Если x равен 0, то (y / x) не вычисляется, предотвращая ошибку деления на ноль
if x != 0 and (y / x) > 2:
    print("Условие выполнено")
else:
    print("Условие не выполнено")  # Это условие выполняется, так как x равен 0

# Пример использования оператора 'or'
# Пример выбора первого "истинного" значения среди двух переменных
a = None
b = "Непустая строка"

# a - False, поэтому b оценивается и присваивается переменной message
message = a or b
print(message)  # Выведет: "Непустая строка"

"""
Заключение:
Эти примеры иллюстрируют, как операторы 'and' и 'or' могут быть использованы для повышения безопасности и эффективности кода. 
Они позволяют избегать ненужных вычислений и ошибок, особенно в сложных логических выражениях.
"""


# Демонстрация логических операторов 'and' и 'or' в Python

# Пример использования оператора 'and'
# Оператор 'and' возвращает True только тогда, когда оба его операнда истинны.
# Если первый операнд ложен, второй даже не оценивается (короткое замыкание).
condition1 = False
condition2 = True  # Этот операнд не будет оцениваться, так как condition1 уже False.

result_and = condition1 and condition2
print("Результат оператора and:", result_and)  # Выведет: False

# Пример использования оператора 'or'
# Оператор 'or' возвращает True, если хотя бы один из его операндов истинен.
# Если первый операнд истинен, второй не оценивается (короткое замыкание).
condition3 = True
condition4 = False  # Этот операнд не будет оцениваться, так как condition3 уже True.

result_or = condition3 or condition4
print("Результат оператора or:", result_or)  # Выведет: True

# Комбинирование 'and' и 'or' для создания более сложных условий
# В этом примере используется комбинация операторов для формирования сложного логического условия.
complex_condition = (condition1 and condition2) or (condition3 and condition4)
print("Результат комбинированного условия:", complex_condition)  # Выведет: True

"""
Объяснение кода:
1. В первом примере ('and') результатом является False, так как первый операнд (condition1) ложен.
   Это демонстрирует свойство короткого замыкания, при котором второй операнд не оценивается, если первый ложен.

2. Во втором примере ('or') результатом является True, поскольку первый операнд (condition3) истинен.
   Аналогично, второй операнд (condition4) не оценивается, так как первый уже истинен.

3. В последнем примере демонстрируется комбинирование 'and' и 'or'.
   Здесь результатом является True, так как одна из пар условий (condition3 and condition4) истинна.
"""


"""
Документация: Логические Операторы 'and' и 'or' в Python

Этот скрипт демонстрирует использование логических операторов 'and' и 'or', 
которые являются основными инструментами для создания сложных логических условий в Python. 
Эти операторы применяются для объединения нескольких булевых выражений и имеют свойство 'короткого замыкания'.

Короткое замыкание означает, что в выражении с 'and' или 'or' 
Python оценивает выражения слева направо и прекращает вычисление, 
как только результат становится очевидным.

Операторы:
- 'and': Возвращает True, если оба операнда истинны. 
Если первый операнд ложен, второй операнд даже не оценивается.
- 'or': Возвращает True, если хотя бы один из операндов истинен. 
Если первый операнд истинен, второй операнд не оценивается.

Примеры использования:
"""

# Пример использования оператора 'and'
condition1 = False
condition2 = True  # Этот операнд не будет оцениваться, так как condition1 уже False.
result_and = condition1 and condition2
print("Результат оператора and:", result_and)  # Выведет: False

# Пример использования оператора 'or'
condition3 = True
condition4 = False  # Этот операнд не будет оцениваться, так как condition3 уже True.
result_or = condition3 or condition4
print("Результат оператора or:", result_or)  # Выведет: True

# Комбинирование 'and' и 'or'
complex_condition = (condition1 and condition2) or (condition3 and condition4)
print("Результат комбинированного условия:", complex_condition)  # Выведет: True

"""
Заключение:
Логические операторы 'and' и 'or' используются для создания эффективных и гибких логических условий в программировании на Python. Их свойство короткого замыкания улучшает производительность и предотвращает ненужные вычисления.
"""


from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException

# Настройка веб-драйвера
driver = webdriver.Chrome()
driver.get("https://example.com")

def is_element_present(element_id):
    """
    Проверяет наличие элемента на странице.

    :param element_id: ID элемента для проверки.
    :return: Возвращает True, если элемент присутствует, иначе False.
    """
    try:
        driver.find_element_by_id(element_id)
        return True
    except NoSuchElementException:
        return False

# ID элементов для проверки
element_id_1 = "myElement1"
element_id_2 = "myElement2"
element_id_3 = "myElement3"

# Проверка наличия элементов на странице
element1_present = is_element_present(element_id_1)
element2_present = is_element_present(element_id_2)
element3_present = is_element_present(element_id_3)

# Использование логических операторов для формирования сложных условий
if element1_present and element2_present:
    print(f"Элементы {element_id_1} и {element_id_2} присутствуют.")
elif element1_present or element3_present:
    print(f"Хотя бы один из элементов {element_id_1} или {element_id_3} присутствует.")
else:
    print("Ни один из элементов не присутствует.")

# Закрытие браузера
driver.quit()

'''
Объяснение Кода:
Настройка WebDriver и Открытие Страницы:

Используется Selenium WebDriver для открытия браузера и перехода на указанный URL.
Функция is_element_present:

Функция проверяет наличие элемента на странице по его ID. 
В случае нахождения элемента возвращается True, иначе, 
при возникновении исключения NoSuchElementException, возвращается False.

Проверка Наличия Элементов:

Выполняется проверка наличия трех элементов на странице.
Использование Логических Операторов:

С помощью оператора and проверяется, 
присутствуют ли первый и второй элементы на странице одновременно.
С помощью оператора or проверяется, 
присутствует ли хотя бы один из первого или третьего элементов на странице.
В зависимости от результатов этих проверок, 
выполняются различные блоки кода.
Этот пример иллюстрирует, 
как логические операторы могут использоваться в автотестах 
для создания более сложных условий, 
основанных на наличии или отсутствии определенных элементов на веб-странице.
'''

"""
Использование Логических Операторов 'and' и 'or' в Автотестах

Этот скрипт демонстрирует применение логических операторов 'and' и 'or' в автоматизированных тестах с использованием Selenium для Python. 
Основная цель - проверить наличие нескольких элементов на веб-странице и выполнить различные действия на основе этих проверок.

Функции:
- is_element_present: Проверяет наличие элемента на странице по его ID и возвращает булево значение.

Процесс:
1. Инициализация веб-драйвера и переход на заданный URL.
2. Проверка наличия трех элементов на странице.
3. Использование логических операторов 'and' и 'or' для формирования комплексных условий в инструкциях 'if'.
4. Вывод соответствующих сообщений в зависимости от результатов проверок.

Код:
"""

from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException

def is_element_present(driver, element_id):
    """
    Проверяет наличие элемента на странице.

    :param driver: Экземпляр веб-драйвера Selenium.
    :param element_id: ID элемента для проверки.
    :return: True, если элемент присутствует, иначе False.
    """
    try:
        driver.find_element_by_id(element_id)
        return True
    except NoSuchElementException:
        return False

# Инициализация веб-драйвера и переход на страницу
driver = webdriver.Chrome()
driver.get("https://example.com")

# Проверка наличия элементов
element_id_1 = "myElement1"
element_id_2 = "myElement2"
element_id_3 = "myElement3"
element1_present = is_element_present(driver, element_id_1)
element2_present = is_element_present(driver, element_id_2)
element3_present = is_element_present(driver, element_id_3)

# Применение логических операторов
if element1_present and element2_present:
    print(f"Элементы {element_id_1} и {element_id_2} присутствуют.")
elif element1_present or element3_present:
    print(f"Хотя бы один из элементов {element_id_1} или {element_id_3} присутствует.")
else:
    print("Ни один из элементов не присутствует.")

# Закрытие браузера
driver.quit()

"""
Заключение:
Данный код демонстрирует эффективное использование логических операторов 'and' и 'or' 
в сценариях автоматизированного тестирования. 
Эти операторы позволяют создавать сложные условия 
для проверки наличия или отсутствия элементов на веб-странице.
"""
