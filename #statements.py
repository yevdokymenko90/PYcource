#statements

"""
Пример использования инструкции if в Python.

Этот скрипт демонстрирует базовое использование if, 
а также конструкции if-elif-else 
для разветвления логики программы в зависимости от различных условий.
"""

# Базовое использование if
number = 15
if number > 10:
    # Этот блок кода выполнится, если number больше 10
    print("Число больше 10.")
# Выведет: Число больше 10.

# Использование if-else
# Проверка, является ли число четным
if number % 2 == 0:
    # Этот блок кода выполнится, если число четное
    print("Число четное.")
else:
    # Этот блок кода выполнится, если число нечетное
    print("Число нечетное.")
# Выведет: Число нечетное.

# Использование if-elif-else
# Определение диапазона числа
if number < 10:
    # Этот блок кода выполнится, если number меньше 10
    print("Число меньше 10.")
elif 10 <= number <= 20:
    # Этот блок кода выполнится, если number находится в диапазоне от 10 до 20
    print("Число в диапазоне от 10 до 20.")
else:
    # Этот блок кода выполнится, если number больше 20
    print("Число больше 20.")
# Выведет: Число в диапазоне от 10 до 20.

"""
В этом коде:
1. В первом блоке используется инструкция if для проверки, 
больше ли число 10. 
В зависимости от результата, 
выводится соответствующее сообщение.
2. Во втором блоке используется конструкция 
if-else для определения, 
является ли число четным или нечетным.
3. В третьем блоке используется конструкция 
if-elif-else для определения, 
в каком диапазоне находится число (меньше 10, от 10 до 20, больше 20).
"""



"""
Пример использования инструкции if с ложными значениями в Python.

Этот скрипт демонстрирует, как инструкция if ведет себя с различными ложными значениями.
"""

# Ложное числовое значение
number = 0
if number:
    print("Число не нулевое.")
else:
    print("Число нулевое.")
# Выведет: Число нулевое.

# Ложное строковое значение
text = ''
if text:
    print("Строка не пустая.")
else:
    print("Строка пустая.")
# Выведет: Строка пустая.

# Ложное значение списка
list_data = []
if list_data:
    print("Список не пустой.")
else:
    print("Список пустой.")
# Выведет: Список пустой.

# Ложное значение None
none_value = None
if none_value:
    print("Значение не None.")
else:
    print("Значение None.")
# Выведет: Значение None.

"""
В этом коде:
1. Проверяется, является ли числовое значение нулем. Если да, то выполняется блок else.
2. Проверяется, пустая ли строка. Если строка пустая, то выполняется блок else.
3. Проверяется, пустой ли список. Если список пустой, то выполняется блок else.
4. Проверяется, равно ли значение None. Если да, то выполняется блок else.
"""

"""
Пример использования инструкции if с оператором отрицания not в Python.
"""

# Предположим, у нас есть переменная loggedIn, которая показывает, авторизован ли пользователь
loggedIn = False

# Использование not для проверки, не авторизован ли пользователь
if not loggedIn:
    print("Пользователь не авторизован, показать форму входа.")
else:
    print("Пользователь авторизован, показать главную страницу.")
# Выведет: Пользователь не авторизован, показать форму входа.

# Еще один пример с пустым списком
shopping_list = []

# Использование not для проверки, пуст ли список
if not shopping_list:
    print("Список покупок пуст, нужно добавить товары.")
else:
    print("Список покупок содержит товары.")
# Выведет: Список покупок пуст, нужно добавить товары.

"""
В этом коде:
1. Используется переменная loggedIn для демонстрации, как можно использовать not для выполнения кода, если пользователь не авторизован.
2. Используется список shopping_list для демонстрации, как можно использовать not для выполнения кода, если список пуст.

В этих примерах not инвертирует булево значение условия. 
В первом примере, если loggedIn равно False, 
условие not loggedIn становится True, 
и выполняется код в блоке if. 
Аналогично, во втором примере, если список shopping_list пустой 
(что является ложным значением), 
not shopping_list становится True, 
и также выполняется код в блоке if.

Использование not удобно, 
когда вам нужно проверить, 
что условие не выполняется. 
Это делает код более читаемым и понятным, 
особенно в случаях, 
когда вы проверяете отсутствие чего-либо (например, неавторизованный пользователь, пустой список и т. д.).

"""

from playwright.sync_api import sync_playwright

def test_checkboxes():
    with sync_playwright() as p:
        # Запуск браузера
        browser = p.chromium.launch(headless=False)  # Установите headless=True для запуска в фоновом режиме
        page = browser.new_page()

        # Переход на страницу с чекбоксами
        page.goto("https://the-internet.herokuapp.com/checkboxes")

        # Получение чекбоксов
        checkboxes = page.query_selector_all("input[type='checkbox']")

        # Проверка состояния каждого чекбокса и изменение его состояния
        for checkbox in checkboxes:
            if checkbox.is_checked():
                print("Чекбокс уже отмечен.")
            else:
                print("Чекбокс не отмечен, отмечаем его.")
                checkbox.check()
        
        # Закрытие браузера
        browser.close()

if __name__ == "__main__":
    test_checkboxes()

'''

Этот Python скрипт использует библиотеку Playwright для автоматизации веб-браузера. 
Он открывает веб-страницу с чекбоксами и меняет состояние каждого чекбокса.

Вот подробное объяснение каждого шага:

1. Импортируется функция `sync_playwright` из библиотеки Playwright.

2. Определяется функция `test_checkboxes()`. 
Внутри этой функции:

   - Создается контекст Playwright с помощью `sync_playwright()`. 
   Это позволяет управлять браузерами.

   - Запускается новый экземпляр браузера Chromium с помощью 
   `p.chromium.launch(headless=False)`. 
   Параметр `headless=False` означает, что браузер будет видимым. 
   Если вы хотите, чтобы браузер работал в фоновом режиме, установите `headless=True`.

   - Открывается новая вкладка браузера с помощью `browser.new_page()`.

   - Браузер переходит на веб-страницу "https://the-internet.herokuapp.com/checkboxes" с помощью `page.goto()`.

   - Получаются все чекбоксы на странице с помощью `page.query_selector_all("input[type='checkbox']")`.

   - Для каждого чекбокса проверяется его состояние с помощью `checkbox.is_checked()`. 
   Если чекбокс не отмечен, он отмечается с помощью `checkbox.check()`.

   - Закрывается браузер с помощью `browser.close()`.

3. Если этот скрипт запущен как основная программа 
(а не импортирован как модуль), вызывается функция `test_checkboxes()`.

'''

"""
Демонстрация использования конструкции if-else в Python.

Этот код содержит примеры использования if-else для выполнения различных блоков кода на основе определенных условий.
"""

# Пример 1: Простое использование if-else
age = 18

# Проверка, достиг ли человек совершеннолетия
if age >= 18:
    print("Человек совершеннолетний.")
else:
    print("Человек несовершеннолетний.")
# Выведет "Человек совершеннолетний.", если age >= 18

# Пример 2: if-else с числовыми значениями
number = 10

# Проверка, является ли число четным или нечетным
if number % 2 == 0:
    print("Число четное.")
else:
    print("Число нечетное.")
# Выведет "Число четное.", если number делится на 2 без остатка

# Пример 3: if-else с использованием списка
fruits = ["apple", "banana", "cherry"]

# Проверка, содержит ли список определенный элемент
if "apple" in fruits:
    print("Яблоко есть в списке.")
else:
    print("Яблока нет в списке.")
# Выведет "Яблоко есть в списке.", если "apple" присутствует в списке fruits

"""
В каждом из этих примеров используется конструкция if-else для выполнения разных блоков кода в зависимости от условия.
- В первом примере условие проверяет, достиг ли человек определенного возраста.
- Во втором примере условие определяет, является ли число четным.
- В третьем примере условие проверяет наличие элемента в списке.
"""



from playwright.sync_api import sync_playwright

def test_dynamic_controls():
    with sync_playwright() as p:
        # Запуск браузера
        browser = p.chromium.launch(headless=False)  # Установите headless=True для запуска в фоновом режиме
        page = browser.new_page()

        # Переход на страницу Dynamic Controls
        page.goto("https://the-internet.herokuapp.com/dynamic_controls")

        # Найти чекбокс
        checkbox = page.query_selector("input[type='checkbox']")

        # Проверить, отображается ли чекбокс
        if checkbox.is_visible():
            print("Чекбокс виден, удаляем его.")
            # Нажать на кнопку, чтобы удалить чекбокс
            page.click("button:text('Remove')")
        else:
            print("Чекбокс не виден, добавляем его.")
            # Нажать на кнопку, чтобы добавить чекбокс
            page.click("button:text('Add')")

        # Ожидание изменения состояния элемента
        page.wait_for_selector("input[type='checkbox']", state="attached")

        # Закрытие браузера
        browser.close()

if __name__ == "__main__":
    test_dynamic_controls()


'''

В этом скрипте:

Запускается браузер и открывается страница "Dynamic Controls".
Находится чекбокс на странице.
С помощью if-else проверяется, виден ли чекбокс на странице. 
Если виден, нажимается кнопка для его удаления. 
Если не виден, нажимается кнопка для его добавления.

Используется page.wait_for_selector с параметром state="attached", 
чтобы дождаться появления чекбокса на странице после нажатия кнопки.
После выполнения действий браузер закрывается.
Этот тест иллюстрирует использование условной логики if-else 
в контексте автоматизированного тестирования веб-страницы. 
Он показывает, как можно динамически адаптироваться к состоянию веб-страницы 
и выполнять соответствующие действия на основе этого состояния.

'''



"""
Пример использования конструкции if-elif в Python.

Этот скрипт содержит примеры использования if-elif для определения и выполнения различных блоков кода на основе нескольких условий.
"""

# Пример: Определение времени года по месяцу
month = "Июнь"

# Проверка месяца и вывод соответствующего времени года
if month in ["Декабрь", "Январь", "Февраль"]:
    print("Это зима.")
elif month in ["Март", "Апрель", "Май"]:
    print("Это весна.")
elif month in ["Июнь", "Июль", "Август"]:
    print("Это лето.")
elif month in ["Сентябрь", "Октябрь", "Ноябрь"]:
    print("Это осень.")
else:
    print("Неизвестный месяц.")
# Выведет "Это лето.", так как month равно "Июнь"

# Пример: Оценка результатов теста
score = 75

# Проверка баллов и определение уровня
if score >= 90:
    print("Уровень A")
elif score >= 80:
    print("Уровень B")
elif score >= 70:
    print("Уровень C")
elif score >= 60:
    print("Уровень D")
else:
    print("Уровень F")
# Выведет "Уровень C", так как score равно 75

"""
Объяснение кода:

1. В первом примере используется if-elif для определения времени года на основе месяца. 
Каждый блок elif проверяет, 
входит ли месяц в один из списков месяцев, 
соответствующих определенному времени года.

2. Во втором примере оценка (score) сравнивается с диапазонами значений для определения уровня. 
Каждый блок elif соответствует определенному диапазону баллов.

3. В каждом случае, 
когда условие в if или одном из блоков elif выполняется, 
соответствующий блок кода выполняется и последующие блоки elif не проверяются.
"""


'''

Давайте создадим автотест на Python 
с использованием Playwright для сайта "https://the-internet.herokuapp.com/", 
где мы будем использовать конструкцию if-elif 
для проверки различных состояний элементов на странице. 
В качестве примера, давайте тестируем страницу "Dropdown", 
где проверим выбор различных опций из выпадающего списка.


'''

from playwright.sync_api import sync_playwright

def test_dropdown():
    with sync_playwright() as p:
        # Запуск браузера
        browser = p.chromium.launch(headless=False)
        page = browser.new_page()

        # Переход на страницу Dropdown
        page.goto("https://the-internet.herokuapp.com/dropdown")

        # Выбор элемента из выпадающего списка
        dropdown = page.query_selector("#dropdown")
        dropdown.select_option("Option 1")

        # Получение выбранного значения
        selected_option = dropdown.input_value()

        # Использование if-elif для проверки выбранного значения
        if selected_option == "Option 1":
            print("Выбрана опция 1")
        elif selected_option == "Option 2":
            print("Выбрана опция 2")
        else:
            print("Выбрана неизвестная опция")

        # Закрытие браузера
        browser.close()

if __name__ == "__main__":
    test_dropdown()


'''

В этом скрипте:

Запускается браузер и открывается страница "Dropdown".
Выбирается опция "Option 1" из выпадающего списка.
Получается выбранное значение из списка.
Используется конструкция if-elif для проверки, какая опция была выбрана. 
В зависимости от выбранного значения, выводится соответствующее сообщение.
После выполнения проверок браузер закрывается.
Этот тест иллюстрирует, 
как можно использовать if-elif в автотестах 
для динамической проверки состояний элементов веб-страницы и 
выполнения соответствующих действий на основе этих состояний.

'''

'''

Конечно! Давайте создадим ещё один пример автотеста на Python 
с использованием Playwright для сайта "https://the-internet.herokuapp.com/", 
на этот раз мы будем тестировать страницу "Notification Messages".

Этот тест будет проверять текст всплывающих уведомлений, 
используя if-elif для различения сообщений.

Пример Автотеста с Использованием if-elif

'''

from playwright.sync_api import sync_playwright

def test_notification_messages():
    with sync_playwright() as p:
        # Запуск браузера
        browser = p.chromium.launch(headless=False)
        page = browser.new_page()

        # Переход на страницу Notification Messages
        page.goto("https://the-internet.herokuapp.com/notification_message_rendered")

        # Нажатие на ссылку для генерации уведомления
        page.click("a[href='/notification_message']")

        # Получение текста уведомления
        notification_text = page.query_selector("#flash").text_content()

        # Использование if-elif для проверки текста уведомления
        if "Action successful" in notification_text:
            print("Уведомление о успешном действии")
        elif "Action unsuccesful, please try again" in notification_text:
            print("Уведомление о неудачном действии")
        else:
            print("Неизвестное уведомление")

        # Закрытие браузера
        browser.close()

if __name__ == "__main__":
    test_notification_messages()


'''

В этом скрипте:

Запускается браузер и открывается страница "Notification Messages".
Происходит клик по ссылке, который генерирует всплывающее уведомление.
Получается и анализируется текст уведомления.
Используется if-elif для определения типа уведомления и вывода соответствующего сообщения.
Завершается работа браузера.
Этот тест иллюстрирует, 
как можно использовать условные конструкции для 
адаптации теста к различным возможным сценариям на веб-странице, 
особенно когда результат действия не всегда предсказуем или может изменяться.

'''

